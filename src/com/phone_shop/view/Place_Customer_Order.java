package com.phone_shop.view;

import com.phone_shop.controller.CustomerController;
import com.phone_shop.controller.ItemController;
import com.phone_shop.controller.ItemQTYUpdateController;
import com.phone_shop.controller.OrderController;
import com.phone_shop.controller.OrderDetailController;
import com.phone_shop.controller.PaymentController;
import com.phone_shop.model.ItemQTYUpdate;
import com.phone_shop.model.Order;
import com.phone_shop.model.OrderDetail;
import com.phone_shop.model.Payment;
import com.phone_shop.other.IDGenerator4Int;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author NisalSP9
 */
public final class Place_Customer_Order extends javax.swing.JDialog {

    double total;
    double qty_On_Hand;
    private String warrenty;
    ArrayList<Double> currentQTYKeeper = new ArrayList<>();
    ArrayList<String> itemCodeKeeper = new ArrayList<>();
    CustomerController customerController = new CustomerController();
    DefaultTableModel model;

    String selling_price_pre_pack = "0";
    String selling_price_pre_peace = "0";

    public Place_Customer_Order(java.awt.Frame parent, boolean modal, String user) {
        //super(parent, modal);//because of this jreport go behind
        initComponents();
        username.setText(user);
        autoFillCB();
        trackEnterPressed();
        autoFillCBItem();
        trackEnterPressedItem();

        //get Current date
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date curDate = new Date();
        dateText.setText(dateFormat.format(curDate));

        try {
            int ID = IDGenerator4Int.getNextId("ordertable", "orderID");
            orderIDText.setText(ID + "");

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Place_Customer_Order.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addCustomerButton3 = new javax.swing.JButton();
        orderIDText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        custCB = new javax.swing.JComboBox();
        itemCB = new javax.swing.JComboBox();
        priceCB = new javax.swing.JComboBox<>();
        qtyNeededText = new javax.swing.JTextField();
        priceText = new javax.swing.JTextField();
        discountText = new javax.swing.JTextField();
        QTYOnHandText = new javax.swing.JTextField();
        dateText = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        removeALL = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        itemCodeText = new javax.swing.JTextField();
        username = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableVeiw = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        custName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        custID = new javax.swing.JTextField();
        sellingPricePerItem = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Discount4ItemText = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        totalText = new javax.swing.JTextField();
        paymentTypeCB = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        changeText = new javax.swing.JTextField();
        cashText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(10, 10, 0, 0));
        setMinimumSize(new java.awt.Dimension(1340, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Open Sans", 1, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Sales");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 350, 40);

        addCustomerButton3.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        addCustomerButton3.setText("New Customer");
        addCustomerButton3.setBorder(null);
        addCustomerButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addCustomerButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(addCustomerButton3);
        addCustomerButton3.setBounds(400, 60, 190, 40);

        orderIDText.setEditable(false);
        orderIDText.setBackground(new java.awt.Color(204, 204, 204));
        orderIDText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        getContentPane().add(orderIDText);
        orderIDText.setBounds(720, 60, 100, 40);

        jLabel3.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel3.setText("Order ID");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(630, 60, 90, 40);

        custCB.setEditable(true);
        custCB.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        custCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custCBActionPerformed(evt);
            }
        });
        getContentPane().add(custCB);
        custCB.setBounds(10, 60, 380, 40);

        itemCB.setEditable(true);
        itemCB.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        itemCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCBActionPerformed(evt);
            }
        });
        getContentPane().add(itemCB);
        itemCB.setBounds(10, 160, 580, 40);

        priceCB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        priceCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selling Price Pre Peace", "Selling Price Pre Pack" }));
        priceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceCBActionPerformed(evt);
            }
        });
        getContentPane().add(priceCB);
        priceCB.setBounds(630, 110, 320, 40);

        qtyNeededText.setBackground(new java.awt.Color(102, 255, 51));
        qtyNeededText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        qtyNeededText.setText("0");
        qtyNeededText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qtyNeededTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                qtyNeededTextMouseExited(evt);
            }
        });
        qtyNeededText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyNeededTextActionPerformed(evt);
            }
        });
        qtyNeededText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyNeededTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyNeededTextKeyTyped(evt);
            }
        });
        getContentPane().add(qtyNeededText);
        qtyNeededText.setBounds(1150, 160, 170, 40);

        priceText.setEditable(false);
        priceText.setBackground(new java.awt.Color(204, 204, 204));
        priceText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        getContentPane().add(priceText);
        priceText.setBounds(1150, 110, 170, 40);

        discountText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        discountText.setText("0");
        discountText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                discountTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                discountTextMouseExited(evt);
            }
        });
        discountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountTextActionPerformed(evt);
            }
        });
        discountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discountTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                discountTextKeyTyped(evt);
            }
        });
        getContentPane().add(discountText);
        discountText.setBounds(790, 160, 160, 40);

        QTYOnHandText.setEditable(false);
        QTYOnHandText.setBackground(new java.awt.Color(204, 204, 204));
        QTYOnHandText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        getContentPane().add(QTYOnHandText);
        QTYOnHandText.setBounds(1150, 60, 170, 40);

        dateText.setFont(new java.awt.Font("Open Sans", 0, 24)); // NOI18N
        dateText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateText.setText("7878");
        getContentPane().add(dateText);
        dateText.setBounds(1140, 10, 180, 40);

        jLabel8.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel8.setText("QTY On Hand");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(980, 60, 170, 40);

        jLabel5.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel5.setText("Discount Per Sell");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(630, 160, 160, 40);

        jLabel6.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel6.setText("Price of The Item");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(980, 110, 170, 40);

        jLabel7.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel7.setText("QTY Needed");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(980, 160, 170, 40);

        saveButton.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        saveButton.setText("SAVE");
        saveButton.setBorder(null);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton);
        saveButton.setBounds(1140, 540, 180, 40);

        deleteButton.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.setBorder(null);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(1140, 340, 180, 40);

        removeALL.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        removeALL.setText("REMOVE ALL");
        removeALL.setBorder(null);
        removeALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeALLActionPerformed(evt);
            }
        });
        getContentPane().add(removeALL);
        removeALL.setBounds(1140, 380, 180, 40);

        addButton.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        addButton.setText("ADD");
        addButton.setBorder(null);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addButton);
        addButton.setBounds(1140, 300, 180, 40);

        resetButton.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        resetButton.setText("RESET");
        resetButton.setBorder(null);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton);
        resetButton.setBounds(1140, 260, 180, 40);

        itemCodeText.setEditable(false);
        itemCodeText.setBackground(new java.awt.Color(204, 204, 204));
        itemCodeText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        getContentPane().add(itemCodeText);
        itemCodeText.setBounds(100, 210, 120, 40);

        username.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        getContentPane().add(username);
        username.setBounds(10, 630, 90, 40);

        jLabel9.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel9.setText("Name");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(250, 210, 70, 40);

        jLabel18.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel18.setText("Item Code");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(10, 210, 90, 40);

        nameText.setEditable(false);
        nameText.setBackground(new java.awt.Color(204, 204, 204));
        nameText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        getContentPane().add(nameText);
        nameText.setBounds(320, 210, 270, 40);

        tableVeiw.setBackground(new java.awt.Color(51, 51, 51));
        tableVeiw.setFont(new java.awt.Font("Utsaah", 0, 20)); // NOI18N
        tableVeiw.setForeground(new java.awt.Color(204, 204, 204));
        tableVeiw.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Description", "Unit Price", "QTY", "Discount Per Sell", "Discount Per Item", "Selling Price", "warranty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableVeiw.getTableHeader().setReorderingAllowed(false);
        tableVeiw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableVeiwMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableVeiw);
        if (tableVeiw.getColumnModel().getColumnCount() > 0) {
            tableVeiw.getColumnModel().getColumn(0).setResizable(false);
            tableVeiw.getColumnModel().getColumn(1).setResizable(false);
            tableVeiw.getColumnModel().getColumn(2).setResizable(false);
            tableVeiw.getColumnModel().getColumn(3).setResizable(false);
            tableVeiw.getColumnModel().getColumn(4).setResizable(false);
            tableVeiw.getColumnModel().getColumn(5).setResizable(false);
            tableVeiw.getColumnModel().getColumn(6).setResizable(false);
            tableVeiw.getColumnModel().getColumn(7).setResizable(false);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 260, 1130, 360);

        jLabel10.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel10.setText("Customer");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(290, 110, 90, 40);

        custName.setEditable(false);
        custName.setBackground(new java.awt.Color(204, 204, 204));
        custName.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        custName.setText("Retail Customer ");
        getContentPane().add(custName);
        custName.setBounds(380, 110, 210, 40);

        jLabel11.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel11.setText("Customer ID");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(10, 110, 110, 40);

        custID.setEditable(false);
        custID.setBackground(new java.awt.Color(204, 204, 204));
        custID.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        custID.setText("0");
        getContentPane().add(custID);
        custID.setBounds(120, 110, 160, 40);

        sellingPricePerItem.setEditable(false);
        sellingPricePerItem.setBackground(new java.awt.Color(204, 204, 204));
        sellingPricePerItem.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        sellingPricePerItem.setText("0");
        getContentPane().add(sellingPricePerItem);
        sellingPricePerItem.setBounds(1150, 210, 170, 40);

        jLabel12.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel12.setText("Selling Price For Item");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(980, 210, 170, 40);

        Discount4ItemText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        Discount4ItemText.setText("0");
        Discount4ItemText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Discount4ItemTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Discount4ItemTextMouseExited(evt);
            }
        });
        Discount4ItemText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Discount4ItemTextActionPerformed(evt);
            }
        });
        Discount4ItemText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Discount4ItemTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Discount4ItemTextKeyTyped(evt);
            }
        });
        getContentPane().add(Discount4ItemText);
        Discount4ItemText.setBounds(790, 210, 160, 40);

        jLabel13.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel13.setText("Balance");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(870, 630, 80, 40);

        totalText.setEditable(false);
        totalText.setBackground(new java.awt.Color(204, 204, 204));
        totalText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        totalText.setText("0");
        getContentPane().add(totalText);
        totalText.setBounds(670, 630, 180, 40);

        paymentTypeCB.setFont(new java.awt.Font("Utsaah", 1, 24)); // NOI18N
        paymentTypeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Cheque", "Credit" }));
        paymentTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTypeCBActionPerformed(evt);
            }
        });
        getContentPane().add(paymentTypeCB);
        paymentTypeCB.setBounds(1140, 460, 180, 40);

        jLabel14.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel14.setText("Discount Per Item");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(630, 210, 160, 40);

        jLabel15.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel15.setText("Total");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(590, 630, 80, 40);

        changeText.setEditable(false);
        changeText.setBackground(new java.awt.Color(204, 204, 204));
        changeText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        changeText.setText("0");
        getContentPane().add(changeText);
        changeText.setBounds(950, 630, 190, 40);

        cashText.setBackground(new java.awt.Color(204, 204, 204));
        cashText.setFont(new java.awt.Font("Open Sans", 0, 18)); // NOI18N
        cashText.setText("0");
        cashText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashTextActionPerformed(evt);
            }
        });
        cashText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cashTextKeyTyped(evt);
            }
        });
        getContentPane().add(cashText);
        cashText.setBounds(390, 630, 180, 40);

        jLabel16.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel16.setText("Cash");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(330, 630, 60, 40);

        jLabel17.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/phone_shop/view/pics/Win8BackGround-303030.png"))); // NOI18N
        getContentPane().add(jLabel17);
        jLabel17.setBounds(0, -20, 1390, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCustomerButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButton3ActionPerformed
        new AddCustomerView(null, rootPaneCheckingEnabled).setVisible(true);

    }//GEN-LAST:event_addCustomerButton3ActionPerformed

    private void custCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custCBActionPerformed
        if (evt.getModifiers() != 0) {

            itemInfor();

        }
    }//GEN-LAST:event_custCBActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Nothing To RESET !");
            qtyNeededText.setText("0");
        } else {

            custID.setText("0");
            custName.setText("Retail Customer ");
            QTYOnHandText.setText("");
            priceText.setText("");
            itemCodeText.setText("");
            nameText.setText("");
            qtyNeededText.setText("0");
            discountText.setText("0");
            sellingPricePerItem.setText("0");
            Discount4ItemText.setText("0");
            totalText.setText("0");
            itemCB.removeAllItems();
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        totalText.setText("0");
        total = 0;

        model = (DefaultTableModel) tableVeiw.getModel();

        if (!custID.getText().trim().equals("")) {
            if (!itemCodeText.getText().trim().equals("")) {
                if (!qtyNeededText.getText().trim().equals("") & !qtyNeededText.getText().trim().equals("0")) {

                    if (discountText.getText().trim().equals("0") && Discount4ItemText.getText().trim().equals("0")) {
                        double qty = Double.parseDouble(qtyNeededText.getText());
                        double unitPrice = Double.parseDouble(priceText.getText());
                        double sellingPrice = (qty * unitPrice);
                        sellingPricePerItem.setText(Double.toString(sellingPrice));
                    }
                    if (!discountText.getText().trim().equals("0")) {
                        double qty = Double.parseDouble(qtyNeededText.getText());
                        double unitPrice = Double.parseDouble(priceText.getText());
                        double discount = Double.parseDouble(discountText.getText());
                        double sellingPrice = (qty * unitPrice) - discount;
                        sellingPricePerItem.setText(Double.toString(sellingPrice));
                    }
                    if (!Discount4ItemText.getText().trim().equals("0")) {
                        double qty = Double.parseDouble(qtyNeededText.getText());
                        double unitPrice = Double.parseDouble(priceText.getText());
                        double discount = Double.parseDouble(Discount4ItemText.getText());
                        double sellingPrice = (unitPrice - discount) * qty;
                        sellingPricePerItem.setText(Double.toString(sellingPrice));
                    }

                    boolean isExist = false;

                    for (int i = 0; i < tableVeiw.getRowCount(); i++) {

                        if (itemCodeText.getText().trim().equals(tableVeiw.getValueAt(i, 0))) {

                            isExist = true;

                        }

                    }
                    if (isExist == false) {
                        double qty_Needed = Double.parseDouble(qtyNeededText.getText());
                        double currentQTY = qty_On_Hand - qty_Needed;

                        if (qty_On_Hand < qty_Needed) {

                            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Out of Stock !");
                            qtyNeededText.setText("0");

                        } else {

                            model.addRow(new Object[]{itemCodeText.getText(), nameText.getText(), priceText.getText(), qtyNeededText.getText(), discountText.getText(), Discount4ItemText.getText(), sellingPricePerItem.getText(), warrenty});
                            currentQTYKeeper.add(currentQTY);

                            itemCodeKeeper.add(itemCodeText.getText());

                            QTYOnHandText.setText("");
                            priceText.setText("");
                            itemCodeText.setText("");
                            nameText.setText("");
                            qtyNeededText.setText("0");
                            discountText.setText("0");
                            sellingPricePerItem.setText("0");
                            Discount4ItemText.setText("0");
                            totalText.setText("0");
                            itemCB.removeAllItems();

                        }

                    } else {

                        JOptionPane.showMessageDialog(Place_Customer_Order.this, "Item Already Exist...");

                    }

                } else {

                    JOptionPane.showMessageDialog(Place_Customer_Order.this, "QTY should not be 0 or blank");
                }

            } else {

                JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select an ITEM");
            }
        } else {

            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select a Customer");
        }

        for (int i = 0; i < tableVeiw.getRowCount(); i++) {
            total = total + Double.parseDouble((String) tableVeiw.getValueAt(i, 6));
            totalText.setText(Double.toString(total));

        }


    }//GEN-LAST:event_addButtonActionPerformed

    private void discountTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountTextMouseClicked
        discountText.setText("");

        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("")) {

            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select Customer & Itme");

        } else if (!Discount4ItemText.getText().trim().equals("0") || itemCodeText.getText().trim().equals("")) {

            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Discount Per Item is alrady placed");

        }


    }//GEN-LAST:event_discountTextMouseClicked

    private void tableVeiwMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableVeiwMouseClicked

    }//GEN-LAST:event_tableVeiwMouseClicked

    private void discountTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountTextMouseExited
        if (discountText.getText().trim().equals("")) {

            discountText.setText("0");

        }
    }//GEN-LAST:event_discountTextMouseExited

    private void qtyNeededTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyNeededTextMouseExited
        if (qtyNeededText.getText().trim().equals("")) {

            qtyNeededText.setText("0");

        }
    }//GEN-LAST:event_qtyNeededTextMouseExited

    private void discountTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountTextKeyReleased
        if (discountText.getText().trim().equals("")) {
            discountText.setText("0");
        }
    }//GEN-LAST:event_discountTextKeyReleased

    private void qtyNeededTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyNeededTextKeyReleased
        if (qtyNeededText.getText().trim().equals("")) {

            qtyNeededText.setText("0");

        }

    }//GEN-LAST:event_qtyNeededTextKeyReleased

    private void qtyNeededTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyNeededTextMouseClicked
        qtyNeededText.setText("");

        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("")) {

            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select Customer & Itme");

        }
    }//GEN-LAST:event_qtyNeededTextMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        DefaultTableModel tableModel;
        tableModel = (DefaultTableModel) tableVeiw.getModel();

        if (tableVeiw.getSelectedRow() == -1) {
            if (tableVeiw.getRowCount() == 0) {
                JOptionPane.showMessageDialog(Place_Customer_Order.this, "Table is EMPTY");
            } else {
                JOptionPane.showMessageDialog(Place_Customer_Order.this, "You must select a ROW");
            }
        } else {

            totalText.setText("0");
            total = 0;

            int rowToRemove = tableVeiw.getSelectedRow();

            currentQTYKeeper.remove(rowToRemove);
            itemCodeKeeper.remove(rowToRemove);
            tableModel.removeRow(tableVeiw.getSelectedRow());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void removeALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeALLActionPerformed

        DefaultTableModel tableModel;
        tableModel = (DefaultTableModel) tableVeiw.getModel();
        totalText.setText("0");
        total = 0;
        if (tableVeiw.getRowCount() == 0) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Table is EMPTY");

        } else {

            total = 0;
            while (tableModel.getRowCount() > 0) {

                for (int i = 0; i < tableModel.getRowCount(); i++) {

                    tableModel.removeRow(i);

                }
            }

            custID.setText("0");
            custName.setText("Retail Customer ");
            QTYOnHandText.setText("");
            priceText.setText("");
            itemCodeText.setText("");
            nameText.setText("");
            qtyNeededText.setText("0");
            discountText.setText("0");
            sellingPricePerItem.setText("0");
            Discount4ItemText.setText("0");
            totalText.setText("0");
            itemCB.removeAllItems();
            custCB.removeAllItems();
            paymentTypeCB.setSelectedIndex(0);


    }//GEN-LAST:event_removeALLActionPerformed
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        int resOrderTable = 0;
        int resPayment = 0;
        int resItem = 0;
        total = 0;

        if (tableVeiw.getRowCount() == 0) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Table is EMPTY");
        } else {
            //cal total
            for (int i = 0; i < tableVeiw.getRowCount(); i++) {
                total = total + Double.parseDouble((String) tableVeiw.getValueAt(i, 6));
                totalText.setText(Double.toString(total));
            }
            int okayORnot = JOptionPane.showConfirmDialog(null, "Do you really want to SAVE this ?", "SAVE", JOptionPane.YES_NO_OPTION);

            if (okayORnot != 0) {

                totalText.setText("");
                total = 0;
                removeALL.doClick();

            }
            if (okayORnot == 0) {

                int res1 = 0;
                int res2 = 0;

                String orderID = orderIDText.getText();
                String cusID = custID.getText();
                String date = dateText.getText();

                Order order = new Order(orderID, cusID, date);
                OrderDetail orderDetail;

                try {
                    resOrderTable = OrderController.addOrder(order);
                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(Place_Customer_Order.this, ex);

                }
                //payment table

                orderID = orderIDText.getText();
                cusID = custID.getText();
                String paymentType = (String) paymentTypeCB.getSelectedItem();
                date = dateText.getText();
                double Amount = Double.parseDouble(totalText.getText());

                Payment payment = new Payment(orderID, cusID, paymentType, date, Amount);

                try {
                    resPayment = PaymentController.addPayment(payment);
                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(Place_Customer_Order.this, ex);

                }

                if (tableVeiw.getRowCount() > 0 && tableVeiw.getRowCount() < 2) {

                    orderID = orderIDText.getText();
                    String itemCode = (String) tableVeiw.getValueAt(0, 0);
                    String name = (String) tableVeiw.getValueAt(0, 1);
                    double unitPrice = Double.parseDouble((String) tableVeiw.getValueAt(0, 2));
                    double qty = Double.parseDouble((String) tableVeiw.getValueAt(0, 3));
                    double discountPerSell = Double.parseDouble((String) tableVeiw.getValueAt(0, 4));
                    double discountPerItem = Double.parseDouble((String) tableVeiw.getValueAt(0, 5));
                    double sellingPrice = Double.parseDouble((String) tableVeiw.getValueAt(0, 6));
                    orderDetail = new OrderDetail(orderID, itemCode, name, unitPrice, qty, discountPerSell, discountPerItem, sellingPrice);

                    try {

                        res1 = OrderDetailController.addOrderDetail(orderDetail);

                    } catch (SQLException | ClassNotFoundException e) {

                        JOptionPane.showMessageDialog(Place_Customer_Order.this, e);
                    }

                } else {

                    for (int i = 0; i < tableVeiw.getRowCount(); i++) {

                        orderID = orderIDText.getText();
                        String itemCode = (String) tableVeiw.getValueAt(i, 0);
                        String name = (String) tableVeiw.getValueAt(i, 1);
                        double unitPrice = Double.parseDouble((String) tableVeiw.getValueAt(i, 2));
                        double qty = Double.parseDouble((String) tableVeiw.getValueAt(i, 3));
                        double discountPerSell = Double.parseDouble((String) tableVeiw.getValueAt(i, 4));
                        double discountPerItem = Double.parseDouble((String) tableVeiw.getValueAt(i, 5));
                        double sellingPrice = Double.parseDouble((String) tableVeiw.getValueAt(i, 6));

                        java.util.List<OrderDetail> orderDetailList = new java.util.ArrayList<>();
                        orderDetail = new OrderDetail(orderID, itemCode, name, unitPrice, qty, discountPerSell, discountPerItem, sellingPrice, orderDetailList);
                        orderDetailList.add(orderDetail);
                        orderDetail.setOrderDetailList(orderDetailList);

                        try {
                            res2 = OrderDetailController.addOrderDetail(orderDetail);
                        } catch (SQLException | ClassNotFoundException e) {
                            JOptionPane.showMessageDialog(Place_Customer_Order.this, e);
                        }
                    }
                }

                for (int i = 0; i < itemCodeKeeper.size(); i++) {

                    ItemQTYUpdate itemQTYUpdate = new ItemQTYUpdate(itemCodeKeeper.get(i), currentQTYKeeper.get(i));

                    try {

                        resItem = ItemQTYUpdateController.updateQTY(itemQTYUpdate);

                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(Place_Customer_Order.this, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Place_Customer_Order.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

                if (resOrderTable > 0 && resPayment > 0 && res2 > 0 || res1 > 0 && resItem > 0) {
                    //JOptionPane.showMessageDialog(Place_Customer_Order.this, "Saved...");

                    int okayPrint = JOptionPane.showConfirmDialog(Place_Customer_Order.this, "Saved...! \n Do you really want to PRINT INVOICE ?", "Print", JOptionPane.YES_NO_OPTION);

                    if (okayPrint == 0) {
                        printInvoice();
                    }

                    try {
                        int ID = IDGenerator4Int.getNextId("ordertable", "orderID");
                        orderIDText.setText(ID + "");

                    } catch (ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(Place_Customer_Order.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

                DefaultTableModel tableModel;
                tableModel = (DefaultTableModel) tableVeiw.getModel();

                if (tableVeiw.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(Place_Customer_Order.this, "Table is EMPTY");

                } else {

                    while (tableModel.getRowCount() > 0) {

                        for (int i = 0; i < tableModel.getRowCount(); i++) {

                            tableModel.removeRow(i);

                        }
                    }

                    cashText.setText("");
                    changeText.setText("");
                    custID.setText("0");
                    custName.setText("Retail Customer ");
                    QTYOnHandText.setText("");
                    priceText.setText("");
                    itemCodeText.setText("");
                    nameText.setText("");
                    qtyNeededText.setText("0");
                    discountText.setText("0");
                    sellingPricePerItem.setText("0");
                    Discount4ItemText.setText("0");
                    totalText.setText("0");
                    custCB.removeAllItems();
                    paymentTypeCB.setSelectedIndex(0);

                }

            }

        }
        total = 0;
    }//GEN-LAST:event_saveButtonActionPerformed

    private void qtyNeededTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyNeededTextKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_qtyNeededTextKeyTyped

    private void discountTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountTextKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_discountTextKeyTyped

    private void Discount4ItemTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Discount4ItemTextKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_Discount4ItemTextKeyTyped

    private void Discount4ItemTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Discount4ItemTextKeyReleased
        if (Discount4ItemText.getText().trim().equals("")) {

            Discount4ItemText.setText("0");

        }
    }//GEN-LAST:event_Discount4ItemTextKeyReleased

    private void Discount4ItemTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Discount4ItemTextMouseExited
        if (Discount4ItemText.getText().trim().equals("")) {

            Discount4ItemText.setText("0");

        }
    }//GEN-LAST:event_Discount4ItemTextMouseExited

    private void Discount4ItemTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Discount4ItemTextMouseClicked
        Discount4ItemText.setText("");

        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("")) {

            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select Customer & Itme");

        }
    }//GEN-LAST:event_Discount4ItemTextMouseClicked

    private void paymentTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTypeCBActionPerformed

        if (custID.getText().trim().equals("")) {

            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select a CUSTOMER !");
            paymentTypeCB.setSelectedIndex(0);
        } else if (totalText.getText().trim().equals("0")) {

            //JOptionPane.showMessageDialog(Place_Customer_Order.this, "Check The TOTAL !");
            paymentTypeCB.setSelectedIndex(0);

        } else {

            if (paymentTypeCB.getSelectedIndex() == 1) {

                new ChequeDetailView(null, rootPaneCheckingEnabled, Double.toString(total), dateText.getText(), orderIDText.getText()).setVisible(true);

                saveButton.doClick();

            }
            if (paymentTypeCB.getSelectedIndex() == 2) {

                new CreditDetail(null, rootPaneCheckingEnabled, Double.toString(total), dateText.getText(), orderIDText.getText()).setVisible(true);
                saveButton.doClick();

            }

        }
    }//GEN-LAST:event_paymentTypeCBActionPerformed

    private void cashTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashTextActionPerformed
        double a = Double.parseDouble(cashText.getText()) - Double.parseDouble(totalText.getText());
        changeText.setText(Double.toString(a));
    }//GEN-LAST:event_cashTextActionPerformed

    private void itemCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCBActionPerformed
        if (evt.getModifiers() != 0) {

            itemInforItem();
            priceSelecter();

        }
    }//GEN-LAST:event_itemCBActionPerformed

    private void priceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceCBActionPerformed
        priceSelecter();
        qtyNeededText.setText("0");
        sellingPricePerItem.setText("0");
        Discount4ItemText.setText("0");
        discountText.setText("0");

    }//GEN-LAST:event_priceCBActionPerformed

    private void qtyNeededTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyNeededTextActionPerformed
        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("") || priceText.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select Customer, Item & Price Type");
            qtyNeededText.setText("0");
        } else {

            if (discountText.getText().trim().equals("0") && Discount4ItemText.getText().trim().equals("0")) {

                double qty_Needed = Double.parseDouble(qtyNeededText.getText());
                double currentQTY = qty_On_Hand - qty_Needed;

                if (qty_On_Hand < qty_Needed) {

                    JOptionPane.showMessageDialog(Place_Customer_Order.this, "Out of Stock !");
                    qtyNeededText.setText("0");

                } else {

                    QTYOnHandText.setText(Double.toString(currentQTY));
                    double qty = Double.parseDouble(qtyNeededText.getText());
                    double unitPrice = Double.parseDouble(priceText.getText());
                    double sellingPrice = (qty * unitPrice);
                    sellingPricePerItem.setText(Double.toString(sellingPrice));

                }

            }
            if (!discountText.getText().trim().equals("0")) {

                double qty_Needed = Double.parseDouble(qtyNeededText.getText());
                double currentQTY = qty_On_Hand - qty_Needed;

                if (qty_On_Hand < qty_Needed) {

                    JOptionPane.showMessageDialog(Place_Customer_Order.this, "Out of Stock !");
                    qtyNeededText.setText("0");

                } else {

                    QTYOnHandText.setText(Double.toString(currentQTY));
                    double qty = Double.parseDouble(qtyNeededText.getText());
                    double unitPrice = Double.parseDouble(priceText.getText());
                    double discount = Double.parseDouble(discountText.getText());
                    double sellingPrice = (qty * unitPrice) - discount;
                    sellingPricePerItem.setText(Double.toString(sellingPrice));

                }

            }
            if (!Discount4ItemText.getText().trim().equals("0")) {

                double qty_Needed = Double.parseDouble(qtyNeededText.getText());
                double currentQTY = qty_On_Hand - qty_Needed;

                if (qty_On_Hand < qty_Needed) {

                    JOptionPane.showMessageDialog(Place_Customer_Order.this, "Out of Stock !");
                    qtyNeededText.setText("0");

                } else {

                    QTYOnHandText.setText(Double.toString(currentQTY));
                    double qty = Double.parseDouble(qtyNeededText.getText());
                    double unitPrice = Double.parseDouble(priceText.getText());
                    double discount = Double.parseDouble(Discount4ItemText.getText());
                    double sellingPrice = (unitPrice - discount) * qty;
                    sellingPricePerItem.setText(Double.toString(sellingPrice));

                }

            }

        }
    }//GEN-LAST:event_qtyNeededTextActionPerformed

    private void cashTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashTextKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_cashTextKeyTyped

    private void discountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountTextActionPerformed

        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select Customer & Itme");
            discountText.setText("");
        } else if (qtyNeededText.getText().trim().equals("0")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Enter The QTY");
            discountText.setText("");
        } else if (!Discount4ItemText.getText().trim().equals("0")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Discount Per Item is alrady placed");
            discountText.setText("");
        } else {

            if (discountText.getText().trim().equals("")) {
                discountText.setText("0");
            }

            double qty = Double.parseDouble(qtyNeededText.getText());
            double unitPrice = Double.parseDouble(priceText.getText());
            double discount = Double.parseDouble(discountText.getText());
            double sellingPrice = (qty * unitPrice) - discount;
            sellingPricePerItem.setText(Double.toString(sellingPrice));
        }


    }//GEN-LAST:event_discountTextActionPerformed

    private void Discount4ItemTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Discount4ItemTextActionPerformed
        if (custID.getText().trim().equals("") || itemCodeText.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Select Customer & Itme");
            Discount4ItemText.setText("");
        } else if (qtyNeededText.getText().trim().equals("0")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Enter The QTY");
            Discount4ItemText.setText("");
        } else if (!discountText.getText().trim().equals("0")) {
            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Discount Per Item is alrady placed");
            Discount4ItemText.setText("");
        } else {

            if (Discount4ItemText.getText().trim().equals("")) {

                Discount4ItemText.setText("0");

            }

            double qty = Double.parseDouble(qtyNeededText.getText());
            double unitPrice = Double.parseDouble(priceText.getText());
            double discount = Double.parseDouble(Discount4ItemText.getText());
            double sellingPrice = (unitPrice - discount) * qty;
            sellingPricePerItem.setText(Double.toString(sellingPrice));
        }


    }//GEN-LAST:event_Discount4ItemTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Place_Customer_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Place_Customer_Order dialog = new Place_Customer_Order(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public void autoFillCB() {

        custCB.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

            @Override
            public void keyReleased(KeyEvent evt) {

                String Letter = custCB.getEditor().getItem().toString();

                if (evt.getKeyCode() >= 65 && evt.getKeyCode() <= 90 || evt.getKeyCode() == KeyEvent.VK_ENTER && Letter != null) {

                    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                        char[] k = Letter.toCharArray();
                        try {
                            if (Character.isLetter(k[0])) {

                                nameSender(Letter);

                            }

                        } catch (ArrayIndexOutOfBoundsException e) {

                            custCB.setFocusable(false);
                            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Sorry...!");

                            // ResetCustomerButton.doClick();
                            custCB.setFocusable(true);
                            custID.setText("");
                            custName.setText("");

                        }

                    }

                }

            }

        });

    }

    public void nameSender(String Letter) {

        CustomerController customer = new CustomerController();

        try {

            if (customer.getList(Letter) != null) {

                custCB.setModel(customer.getList(Letter));

            }

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Search_Item_View.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (custCB.getItemCount() > 0) {

            custCB.showPopup();
            itemInfor();

        }

    }

    public void itemInfor() {

        try {
            CustomerController customer = new CustomerController();

            String[] ID = custCB.getSelectedItem().toString().split("\\ ");

            String infro[] = customer.giveAwayOrderInfro(ID[0]);
            try {
                custID.setText(infro[0]);
                custName.setText(infro[1]);

            } catch (NullPointerException ex) {
                custCB.setFocusable(false);
                JOptionPane.showMessageDialog(Place_Customer_Order.this, "Can't Find...!");
                //ResetCustomerButton.doClick();
                custID.setText("");
                custName.setText("");
                custCB.setFocusable(true);
            }
        } catch (SQLException | ClassNotFoundException | NullPointerException ex) {
            custCB.setFocusable(false);
            //JOptionPane.showMessageDialog(SearchCustomerView.this, "Can'tFind...!");
            // ResetCustomerButton.doClick();
            custID.setText("");
            custName.setText("");
            custCB.setFocusable(true);
        }

    }

    public void trackEnterPressed() {

        custCB.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

            @Override
            public void keyReleased(KeyEvent evt) {

                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                    itemInfor();

                }

            }
        });

    }

    public void autoFillCBItem() {

        itemCB.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

            @Override
            public void keyReleased(KeyEvent evt) {

                String Letter = itemCB.getEditor().getItem().toString();

                if (evt.getKeyCode() >= 65 && evt.getKeyCode() <= 90 || evt.getKeyCode() == KeyEvent.VK_ENTER && Letter != null) {

                    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                        char[] k = Letter.toCharArray();
                        try {
                            if (Character.isLetter(k[0])) {

                                nameSenderItem(Letter);

                            }

                        } catch (ArrayIndexOutOfBoundsException e) {

                            itemCB.setFocusable(false);
                            JOptionPane.showMessageDialog(Place_Customer_Order.this, "Sorry...!");

                            //resetButton.doClick();
                            itemCB.setFocusable(true);
                            itemCodeText.setText("");
                            nameText.setText("");
                            QTYOnHandText.setText("");
                            priceSelecter();
                            priceCB.setSelectedIndex(0);

                        }

                    }

                }

            }

        });

    }

    public void nameSenderItem(String Letter) {

        ItemController item = new ItemController();

        try {

            if (item.getList(Letter) != null) {

                itemCB.setModel(item.getList(Letter));

            }

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Search_Item_View.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (itemCB.getItemCount() > 0) {

            itemCB.showPopup();
            itemInforItem();

        }

    }

    public void itemInforItem() {

        try {
            ItemController item = new ItemController();

            String[] ID = itemCB.getSelectedItem().toString().split("\\ ");

            String infro[] = item.giveAwayOrderInfro(ID[0]);
            try {
                itemCodeText.setText(infro[0]);
                nameText.setText(infro[1]);
                QTYOnHandText.setText(infro[11]);
                //   descriptionTextArea.setText(infro[2]);
                // brandtext.setText(infro[3]);
                //modelText.setText(infro[4]);
//purchase_price_pre_pack_text.setText(infro[5]);
//purchase_price_pre_peace_text.setText(infro[6]);
                selling_price_pre_pack = infro[7];
                selling_price_pre_peace = infro[8];
                //warrantytext.setText(infro[9]);
                //reorderLevelText.setText(infro[10]);
                qty_On_Hand = Double.parseDouble(infro[11]);
                priceText.setText(infro[8]);
                warrenty = infro[9];

            } catch (NullPointerException ex) {
                itemCB.setFocusable(false);
                JOptionPane.showMessageDialog(Place_Customer_Order.this, "Can't Find...!");
                resetButton.doClick();
                itemCodeText.setText("");
                nameText.setText("");
                QTYOnHandText.setText("");
                priceSelecter();
                itemCB.setFocusable(true);
                priceCB.setSelectedIndex(0);
            }
        } catch (SQLException | ClassNotFoundException | NullPointerException ex) {
            itemCB.setFocusable(false);
            //JOptionPane.showMessageDialog(SearchCustomerView.this, "Can'tFind...!");
            //resetButton.doClick();
            itemCodeText.setText("");
            nameText.setText("");
            QTYOnHandText.setText("");
            priceSelecter();
            priceCB.setSelectedIndex(0);

            itemCB.setFocusable(true);
        }

    }

    public void trackEnterPressedItem() {

        itemCB.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

            @Override
            public void keyReleased(KeyEvent evt) {

                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                    itemInforItem();

                }

            }
        });

    }

    public void priceSelecter() {
        int x = priceCB.getSelectedIndex();

        if (itemCodeText.getText().trim().equals("")) {

            x = 2;

        }

        switch (x) {

            case 1:
                priceText.setText(selling_price_pre_pack);
                break;
            case 0:
                priceText.setText(selling_price_pre_peace);
                break;
            default:
                priceText.setText("0");
                break;

        }

    }

    private void printInvoice() {

        try {

           JasperReport jr = JasperCompileManager.compileReport("src\\com\\phone_shop\\report\\invoice.jrxml");
           //JasperReport jr = JasperCompileManager.compileReport("invoice.jrxml");
            Map<String, Object> params = new HashMap<>();

            params.put("USER", username.getText());
            params.put("ORDERID", orderIDText.getText());
            params.put("TOTAL", totalText.getText());
            params.put("CASH", cashText.getText());
            params.put("CHANGE", changeText.getText());
            params.put("CUSTOMER", custName.getText());
            params.put("PAYMENTTYPE", paymentTypeCB.getSelectedItem().toString());

            JRTableModelDataSource dataSource = new JRTableModelDataSource(tableVeiw.getModel());

            JasperPrint jp = JasperFillManager.fillReport(jr, params, dataSource);

            //JasperPrintManager.printReport(jp, false);
           JasperViewer.viewReport(jp, false);

        } catch (JRException ex) {
            //   Logger.getLogger(Place_Customer_Order.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(Place_Customer_Order.this, ex);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Discount4ItemText;
    private javax.swing.JTextField QTYOnHandText;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addCustomerButton3;
    private javax.swing.JTextField cashText;
    private javax.swing.JTextField changeText;
    private javax.swing.JComboBox custCB;
    private javax.swing.JTextField custID;
    private javax.swing.JTextField custName;
    private javax.swing.JLabel dateText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField discountText;
    private javax.swing.JComboBox itemCB;
    private javax.swing.JTextField itemCodeText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameText;
    private javax.swing.JTextField orderIDText;
    private javax.swing.JComboBox paymentTypeCB;
    private javax.swing.JComboBox<String> priceCB;
    private javax.swing.JTextField priceText;
    private javax.swing.JTextField qtyNeededText;
    private javax.swing.JButton removeALL;
    private javax.swing.JButton resetButton;
    public javax.swing.JButton saveButton;
    private javax.swing.JTextField sellingPricePerItem;
    private javax.swing.JTable tableVeiw;
    private javax.swing.JTextField totalText;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
